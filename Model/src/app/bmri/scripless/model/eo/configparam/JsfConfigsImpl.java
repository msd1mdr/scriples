package app.bmri.scripless.model.eo.configparam;

import oracle.jbo.AttributeList;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 08 09:05:24 ICT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JsfConfigsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ConfigId {
            public Object get(JsfConfigsImpl obj) {
                return obj.getConfigId();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setConfigId((DBSequence)value);
            }
        }
        ,
        ConfigDesc {
            public Object get(JsfConfigsImpl obj) {
                return obj.getConfigDesc();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setConfigDesc((String)value);
            }
        }
        ,
        ConfigKey {
            public Object get(JsfConfigsImpl obj) {
                return obj.getConfigKey();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setConfigKey((String)value);
            }
        }
        ,
        ConfigType {
            public Object get(JsfConfigsImpl obj) {
                return obj.getConfigType();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setConfigType((String)value);
            }
        }
        ,
        ConfigValue {
            public Object get(JsfConfigsImpl obj) {
                return obj.getConfigValue();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setConfigValue((String)value);
            }
        }
        ,
        ConfigVersion {
            public Object get(JsfConfigsImpl obj) {
                return obj.getConfigVersion();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setConfigVersion((Number)value);
            }
        }
        ,
        RowID {
            public Object get(JsfConfigsImpl obj) {
                return obj.getRowID();
            }

            public void put(JsfConfigsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(JsfConfigsImpl object);

        public abstract void put(JsfConfigsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CONFIGID = AttributesEnum.ConfigId.index();
    public static final int CONFIGDESC = AttributesEnum.ConfigDesc.index();
    public static final int CONFIGKEY = AttributesEnum.ConfigKey.index();
    public static final int CONFIGTYPE = AttributesEnum.ConfigType.index();
    public static final int CONFIGVALUE = AttributesEnum.ConfigValue.index();
    public static final int CONFIGVERSION = AttributesEnum.ConfigVersion.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public JsfConfigsImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.bmri.scripless.model.eo.configparam.JsfConfigs");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for ConfigId, using the alias name ConfigId.
     * @return the ConfigId
     */
    public DBSequence getConfigId() {
        return (DBSequence)getAttributeInternal(CONFIGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfigId.
     * @param value value to set the ConfigId
     */
    public void setConfigId(DBSequence value) {
        setAttributeInternal(CONFIGID, value);
    }

    /**
     * Gets the attribute value for ConfigDesc, using the alias name ConfigDesc.
     * @return the ConfigDesc
     */
    public String getConfigDesc() {
        return (String)getAttributeInternal(CONFIGDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfigDesc.
     * @param value value to set the ConfigDesc
     */
    public void setConfigDesc(String value) {
        setAttributeInternal(CONFIGDESC, value);
    }

    /**
     * Gets the attribute value for ConfigKey, using the alias name ConfigKey.
     * @return the ConfigKey
     */
    public String getConfigKey() {
        return (String)getAttributeInternal(CONFIGKEY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfigKey.
     * @param value value to set the ConfigKey
     */
    public void setConfigKey(String value) {
        setAttributeInternal(CONFIGKEY, value);
    }

    /**
     * Gets the attribute value for ConfigType, using the alias name ConfigType.
     * @return the ConfigType
     */
    public String getConfigType() {
        return (String)getAttributeInternal(CONFIGTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfigType.
     * @param value value to set the ConfigType
     */
    public void setConfigType(String value) {
        setAttributeInternal(CONFIGTYPE, value);
    }

    /**
     * Gets the attribute value for ConfigValue, using the alias name ConfigValue.
     * @return the ConfigValue
     */
    public String getConfigValue() {
        return (String)getAttributeInternal(CONFIGVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfigValue.
     * @param value value to set the ConfigValue
     */
    public void setConfigValue(String value) {
        setAttributeInternal(CONFIGVALUE, value);
    }

    /**
     * Gets the attribute value for ConfigVersion, using the alias name ConfigVersion.
     * @return the ConfigVersion
     */
    public Number getConfigVersion() {
        return (Number)getAttributeInternal(CONFIGVERSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfigVersion.
     * @param value value to set the ConfigVersion
     */
    public void setConfigVersion(Number value) {
        setAttributeInternal(CONFIGVERSION, value);
    }

    /**
     * Gets the attribute value for RowID, using the alias name RowID.
     * @return the RowID
     */
    public RowID getRowID() {
        return (RowID)getAttributeInternal(ROWID);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("JSF_CONFIGS_SEQ", getDBTransaction());
        this.setConfigId(new DBSequence(seq.getSequenceNumber()));
    }
}
