package app.bmri.scripless.model.eo.useraccessmenu;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import org.apache.commons.codec.digest.DigestUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 21 23:21:40 ICT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UserAccessImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(UserAccessImpl obj) {
                return obj.getId();
            }

            public void put(UserAccessImpl obj, Object value) {
                obj.setId((DBSequence)value);
            }
        }
        ,
        UserName {
            public Object get(UserAccessImpl obj) {
                return obj.getUserName();
            }

            public void put(UserAccessImpl obj, Object value) {
                obj.setUserName((String)value);
            }
        }
        ,
        Password {
            public Object get(UserAccessImpl obj) {
                return obj.getPassword();
            }

            public void put(UserAccessImpl obj, Object value) {
                obj.setPassword((String)value);
            }
        }
        ,
        FullName {
            public Object get(UserAccessImpl obj) {
                return obj.getFullName();
            }

            public void put(UserAccessImpl obj, Object value) {
                obj.setFullName((String)value);
            }
        }
        ,
        Descr {
            public Object get(UserAccessImpl obj) {
                return obj.getDescr();
            }

            public void put(UserAccessImpl obj, Object value) {
                obj.setDescr((String)value);
            }
        }
        ,
        Title {
            public Object get(UserAccessImpl obj) {
                return obj.getTitle();
            }

            public void put(UserAccessImpl obj, Object value) {
                obj.setTitle((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(UserAccessImpl object);

        public abstract void put(UserAccessImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int FULLNAME = AttributesEnum.FullName.index();
    public static final int DESCR = AttributesEnum.Descr.index();
    public static final int TITLE = AttributesEnum.Title.index();

    /**
     * This is the default constructor (do not remove).
     */
    public UserAccessImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.bmri.scripless.model.eo.useraccessmenu.UserAccess");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public DBSequence getId() {
        return (DBSequence)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(DBSequence value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for UserName, using the alias name UserName.
     * @return the UserName
     */
    public String getUserName() {
        return (String)getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserName.
     * @param value value to set the UserName
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for Password, using the alias name Password.
     * @return the Password
     */
    public String getPassword() {
        return (String)getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Password.
     * @param value value to set the Password
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for FullName, using the alias name FullName.
     * @return the FullName
     */
    public String getFullName() {
        return (String)getAttributeInternal(FULLNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FullName.
     * @param value value to set the FullName
     */
    public void setFullName(String value) {
        setAttributeInternal(FULLNAME, value);
    }

    /**
     * Gets the attribute value for Descr, using the alias name Descr.
     * @return the Descr
     */
    public String getDescr() {
        return (String)getAttributeInternal(DESCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Descr.
     * @param value value to set the Descr
     */
    public void setDescr(String value) {
        setAttributeInternal(DESCR, value);
    }

    /**
     * Gets the attribute value for Title, using the alias name Title.
     * @return the Title
     */
    public String getTitle() {
        return (String)getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Title.
     * @param value value to set the Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("ADF_USER_ACCESS_SEQ", getDBTransaction());
        this.setId(new DBSequence(seq.getSequenceNumber()));
    }
    
    @Override
    protected void doDML(int operation, TransactionEvent transactionEvent) {
        if(operation == DML_INSERT){
            this.setPassword(DigestUtils.sha1Hex(this.getPassword()));
        }
        
        if(operation == DML_UPDATE){
            if(checkAttributeValue("Password")){
                this.setPassword(DigestUtils.sha1Hex(this.getPassword()));              
            } 
        }        
        super.doDML(operation, transactionEvent);
    }
    
    public boolean checkAttributeValue(String _attribute) {
        AttributeDefImpl _checkAttr =
            (AttributeDefImpl)getEntityDef().findAttributeDef(_attribute);
        return isAttributeChanged(_checkAttr.getIndex());
    }
}
