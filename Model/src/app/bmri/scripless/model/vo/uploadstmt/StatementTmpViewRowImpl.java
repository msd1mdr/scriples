package app.bmri.scripless.model.vo.uploadstmt;

import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 06 20:14:06 ICT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StatementTmpViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Extref {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getExtref();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setExtref((String)value);
            }
        }
        ,
        Seqnum {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getSeqnum();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setSeqnum((Number)value);
            }
        }
        ,
        Ac {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getAc();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setAc((String)value);
            }
        }
        ,
        Curcod {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getCurcod();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setCurcod((String)value);
            }
        }
        ,
        Valdate {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getValdate();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setValdate((String)value);
            }
        }
        ,
        Openbal {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getOpenbal();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setOpenbal((Number)value);
            }
        }
        ,
        Accref {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getAccref();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setAccref((String)value);
            }
        }
        ,
        Trxtype {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getTrxtype();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setTrxtype((String)value);
            }
        }
        ,
        Dc {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getDc();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setDc((String)value);
            }
        }
        ,
        Cashval {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getCashval();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setCashval((Number)value);
            }
        }
        ,
        Description {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getDescription();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        Closebal {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getClosebal();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setClosebal((Number)value);
            }
        }
        ,
        Notes {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getNotes();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setNotes((String)value);
            }
        }
        ,
        RowID {
            public Object get(StatementTmpViewRowImpl obj) {
                return obj.getRowID();
            }

            public void put(StatementTmpViewRowImpl obj, Object value) {
                obj.setRowID((RowID)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(StatementTmpViewRowImpl object);

        public abstract void put(StatementTmpViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EXTREF = AttributesEnum.Extref.index();
    public static final int SEQNUM = AttributesEnum.Seqnum.index();
    public static final int AC = AttributesEnum.Ac.index();
    public static final int CURCOD = AttributesEnum.Curcod.index();
    public static final int VALDATE = AttributesEnum.Valdate.index();
    public static final int OPENBAL = AttributesEnum.Openbal.index();
    public static final int ACCREF = AttributesEnum.Accref.index();
    public static final int TRXTYPE = AttributesEnum.Trxtype.index();
    public static final int DC = AttributesEnum.Dc.index();
    public static final int CASHVAL = AttributesEnum.Cashval.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CLOSEBAL = AttributesEnum.Closebal.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public StatementTmpViewRowImpl() {
    }

    /**
     * Gets StatementTmp entity object.
     * @return the StatementTmp
     */
    public EntityImpl getStatementTmp() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for EXTREF using the alias name Extref.
     * @return the EXTREF
     */
    public String getExtref() {
        return (String) getAttributeInternal(EXTREF);
    }

    /**
     * Sets <code>value</code> as attribute value for EXTREF using the alias name Extref.
     * @param value value to set the EXTREF
     */
    public void setExtref(String value) {
        setAttributeInternal(EXTREF, value);
    }

    /**
     * Gets the attribute value for SEQNUM using the alias name Seqnum.
     * @return the SEQNUM
     */
    public Number getSeqnum() {
        return (Number) getAttributeInternal(SEQNUM);
    }

    /**
     * Sets <code>value</code> as attribute value for SEQNUM using the alias name Seqnum.
     * @param value value to set the SEQNUM
     */
    public void setSeqnum(Number value) {
        setAttributeInternal(SEQNUM, value);
    }

    /**
     * Gets the attribute value for AC using the alias name Ac.
     * @return the AC
     */
    public String getAc() {
        return (String) getAttributeInternal(AC);
    }

    /**
     * Sets <code>value</code> as attribute value for AC using the alias name Ac.
     * @param value value to set the AC
     */
    public void setAc(String value) {
        setAttributeInternal(AC, value);
    }

    /**
     * Gets the attribute value for CURCOD using the alias name Curcod.
     * @return the CURCOD
     */
    public String getCurcod() {
        return (String) getAttributeInternal(CURCOD);
    }

    /**
     * Sets <code>value</code> as attribute value for CURCOD using the alias name Curcod.
     * @param value value to set the CURCOD
     */
    public void setCurcod(String value) {
        setAttributeInternal(CURCOD, value);
    }

    /**
     * Gets the attribute value for VALDATE using the alias name Valdate.
     * @return the VALDATE
     */
    public String getValdate() {
        return (String) getAttributeInternal(VALDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for VALDATE using the alias name Valdate.
     * @param value value to set the VALDATE
     */
    public void setValdate(String value) {
        setAttributeInternal(VALDATE, value);
    }

    /**
     * Gets the attribute value for OPENBAL using the alias name Openbal.
     * @return the OPENBAL
     */
    public Number getOpenbal() {
        return (Number) getAttributeInternal(OPENBAL);
    }

    /**
     * Sets <code>value</code> as attribute value for OPENBAL using the alias name Openbal.
     * @param value value to set the OPENBAL
     */
    public void setOpenbal(Number value) {
        setAttributeInternal(OPENBAL, value);
    }

    /**
     * Gets the attribute value for ACCREF using the alias name Accref.
     * @return the ACCREF
     */
    public String getAccref() {
        return (String) getAttributeInternal(ACCREF);
    }

    /**
     * Sets <code>value</code> as attribute value for ACCREF using the alias name Accref.
     * @param value value to set the ACCREF
     */
    public void setAccref(String value) {
        setAttributeInternal(ACCREF, value);
    }

    /**
     * Gets the attribute value for TRXTYPE using the alias name Trxtype.
     * @return the TRXTYPE
     */
    public String getTrxtype() {
        return (String) getAttributeInternal(TRXTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TRXTYPE using the alias name Trxtype.
     * @param value value to set the TRXTYPE
     */
    public void setTrxtype(String value) {
        setAttributeInternal(TRXTYPE, value);
    }

    /**
     * Gets the attribute value for DC using the alias name Dc.
     * @return the DC
     */
    public String getDc() {
        return (String) getAttributeInternal(DC);
    }

    /**
     * Sets <code>value</code> as attribute value for DC using the alias name Dc.
     * @param value value to set the DC
     */
    public void setDc(String value) {
        setAttributeInternal(DC, value);
    }

    /**
     * Gets the attribute value for CASHVAL using the alias name Cashval.
     * @return the CASHVAL
     */
    public Number getCashval() {
        return (Number) getAttributeInternal(CASHVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for CASHVAL using the alias name Cashval.
     * @param value value to set the CASHVAL
     */
    public void setCashval(Number value) {
        setAttributeInternal(CASHVAL, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for CLOSEBAL using the alias name Closebal.
     * @return the CLOSEBAL
     */
    public Number getClosebal() {
        return (Number) getAttributeInternal(CLOSEBAL);
    }

    /**
     * Sets <code>value</code> as attribute value for CLOSEBAL using the alias name Closebal.
     * @param value value to set the CLOSEBAL
     */
    public void setClosebal(Number value) {
        setAttributeInternal(CLOSEBAL, value);
    }

    /**
     * Gets the attribute value for NOTES using the alias name Notes.
     * @return the NOTES
     */
    public String getNotes() {
        return (String) getAttributeInternal(NOTES);
    }

    /**
     * Sets <code>value</code> as attribute value for NOTES using the alias name Notes.
     * @param value value to set the NOTES
     */
    public void setNotes(String value) {
        setAttributeInternal(NOTES, value);
    }

    /**
     * Gets the attribute value for ROWID using the alias name RowID.
     * @return the ROWID
     */
    public RowID getRowID() {
        return (RowID) getAttributeInternal(ROWID);
    }

    /**
     * Sets <code>value</code> as attribute value for ROWID using the alias name RowID.
     * @param value value to set the ROWID
     */
    public void setRowID(RowID value) {
        setAttributeInternal(ROWID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
